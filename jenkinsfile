pipeline {
    agent any

    tools {
        jdk 'jdk17'       // Use JDK 17
        nodejs 'nodejs'   // Ensure Node.js is installed as a tool in Jenkins
    }

    stages {
        // Checkout the repository using Git
        stage('Git Webhook Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']], 
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: 'github-credencial', url: 'https://github.com/justicejr07/hotstar-clone-app-ci-cd-k8.git']]
                )
            }
        }

        // Install npm dependencies
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        // Build the Docker image
        stage('Build Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-credencial', toolName: 'docker') {
                        sh 'docker build -t justicejr48543/hotstarclone:latest .'
                    }
                }
            }
        }

        // Push the Docker image to Docker Hub
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-credencial', toolName: 'docker') {
                        sh 'docker push justicejr48543/hotstarclone:latest'
                    }
                }
            }
        }

        // Run the Docker container
        stage('Run Docker Image') {
            steps {
                script {
                    sh '''
                    docker stop netflixclone-webhookpipe || true
                    docker rm netflixclone-webhookpipe || true

                    # Run the container with the built image
                    docker run -d --name netflixclone-webhookpipe -p 3000:3000 justicejr48543/hotstarclone:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline execution failed. Please check the logs for details.'
        }
    }
}
